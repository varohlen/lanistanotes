---
import '@fontsource/cinzel';
import '@fontsource/open-sans';
import { ViewTransitions } from 'astro:transitions';
import Header from '../components/Header.astro';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="font-open-sans" transition:persist>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Lanista Game Change Notes" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" sizes="32x32" href="/lanista.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/lanista.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
		<style is:global>
			:root {
				--color-text: #E8D5B5;
				--color-background: transparent;
				--color-panel: rgba(0, 0, 0, 0.85);
			}

			.light-theme {
				--color-text: #1a1a1a;
				--color-background: transparent;
				--color-panel: rgba(255, 255, 255, 0.5);
			}

			html {
				min-height: 100%;
				color: var(--color-text);
			}

			body {
				background-image: url('/paper-bg.jpg');
				background-size: cover;
				background-position: center;
				background-attachment: fixed;
				min-height: 100vh;
			}

			.bg-panel {
				background-color: var(--color-panel);
			}

			/* Light theme specific styles */
			.light-theme .content-area {
				background-color: white;
			}

			/* Dark theme specific styles */
			:root:not(.light-theme) .content-area {
				background-color: var(--color-panel);
			}

			/* Override text color for header and sidebar in light theme */
			.light-theme .header-text,
			.light-theme .sidebar-text {
				color: #1a1a1a;
			}

			/* Sidebar hover and active states */
			.light-theme .sidebar-text a:hover {
				background-color: rgba(0, 0, 0, 0.1);
			}

			.light-theme .sidebar-text a.active {
				background-color: rgba(0, 0, 0, 0.2);
			}

			/* Article header styles */
			.article-header {
				background-color: var(--color-panel);
			}

			.light-theme .article-header {
				background-color: #ece4d7;
				color: black;
			}

			/* Title and heading styles for light theme */
			.light-theme .prose h1,
			.light-theme .prose h2,
			.light-theme .prose h3,
			.light-theme .prose h4 {
				color: #4a2f1d;
				font-family: 'Cinzel', serif;
			}

			/* Light theme specific styles */
			.light-theme .prose {
				--tw-prose-body: #1a1a1a;
				--tw-prose-headings: #4a2f1d;
				--tw-prose-lead: #1a1a1a;
				--tw-prose-links: #1a1a1a;
				--tw-prose-bold: #1a1a1a;
				--tw-prose-counters: #1a1a1a;
				--tw-prose-bullets: #1a1a1a;
				--tw-prose-hr: #1a1a1a;
				--tw-prose-quotes: #1a1a1a;
				--tw-prose-quote-borders: #1a1a1a;
				--tw-prose-captions: #1a1a1a;
				--tw-prose-code: #1a1a1a;
				--tw-prose-pre-code: #1a1a1a;
				--tw-prose-pre-bg: #1a1a1a;
				--tw-prose-th-borders: #1a1a1a;
				--tw-prose-td-borders: #1a1a1a;
			}

			:root:not(.light-theme) .prose {
				--tw-prose-body: #E8D5B5;
				--tw-prose-headings: #E8D5B5;
				--tw-prose-lead: #E8D5B5;
				--tw-prose-links: #E8D5B5;
				--tw-prose-bold: #E8D5B5;
				--tw-prose-counters: #E8D5B5;
				--tw-prose-bullets: #9ca3af;
				--tw-prose-hr: rgba(255, 255, 255, 0.1);
				--tw-prose-quotes: #E8D5B5;
				--tw-prose-quote-borders: rgba(255, 255, 255, 0.1);
				--tw-prose-captions: #9ca3af;
				--tw-prose-code: #E8D5B5;
				--tw-prose-pre-code: #E8D5B5;
				--tw-prose-pre-bg: rgba(0, 0, 0, 0.5);
				--tw-prose-th-borders: rgba(255, 255, 255, 0.1);
				--tw-prose-td-borders: rgba(255, 255, 255, 0.1);
			}

			/* Mobile sidebar */
			.mobile-sidebar {
				position: fixed;
				top: 0;
				left: -100%;
				width: 100%;
				height: 100%;
				background-color: rgba(0, 0, 0, 0.5);
				backdrop-filter: blur(4px);
				transition: all 0.3s ease-in-out;
				z-index: 50;
			}

			.mobile-sidebar.open {
				left: 0;
			}

			.mobile-sidebar-content {
				width: 85%;
				max-width: 320px;
				height: 100%;
				background-color: var(--color-panel);
				transform: translateX(-100%);
				transition: transform 0.3s ease-in-out;
			}

			.light-theme .mobile-sidebar-content {
				background-color: rgba(0, 0, 0, 0.85);
				color: #E8D5B5;
			}

			.mobile-sidebar.open .mobile-sidebar-content {
				transform: translateX(0);
			}
		</style>
	</head>
	<body class="text-parchment">
		<!-- Mobile Sidebar -->
		<div id="mobileSidebar" class="mobile-sidebar md:hidden">
			<div class="mobile-sidebar-content p-8">
				<slot name="sidebar" />
			</div>
		</div>

		<div class="min-h-screen p-4 md:p-8 space-y-4 max-w-7xl mx-auto">
			<Header />
			<main class="md:grid md:grid-cols-[250px_minmax(0,1fr)] gap-8">
				<!-- Desktop Sidebar -->
				<nav class="hidden md:block bg-panel backdrop-blur-md p-8 rounded-lg border border-white/10 sidebar-text h-fit">
					<slot name="sidebar" />
				</nav>
				<div class="content-area backdrop-blur-md p-8 rounded-lg border border-white/10">
					<slot />
				</div>
			</main>
		</div>

		<script>
			function setupMobileMenu() {
				const mobileMenuBtn = document.getElementById('mobileMenuBtn');
				const mobileSidebar = document.getElementById('mobileSidebar');

				function toggleSidebar() {
					mobileSidebar?.classList.toggle('open');
					document.body.style.overflow = mobileSidebar?.classList.contains('open') ? 'hidden' : '';
				}

				mobileMenuBtn?.addEventListener('click', toggleSidebar);
				mobileSidebar?.addEventListener('click', (e) => {
					if (e.target === mobileSidebar) {
						toggleSidebar();
					}
				});
			}

			// Setup on initial load
			setupMobileMenu();

			// Setup after each navigation
			document.addEventListener('astro:after-swap', setupMobileMenu);
		</script>
	</body>
</html>